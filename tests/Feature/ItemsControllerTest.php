<?php

namespace Tests\Feature;

use App\Category;
use App\Item;
use App\Services\ItemService;
use Illuminate\Http\UploadedFile;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ItemsControllerTest extends TestCase
{
    private $structure = [];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->structure =  [
            'id', 'name', 'description', 'image', 'category_id', 'created_at',
            'updated_at', 'image_url',
        ];

        if (!Item::count()) {
            $this->seed('ItemsSeeder');
        }
    }

    public function getTempFile():UploadedFile{
        $image_path = __DIR__ . '/assets/image.jpg';
        $destinationPath = ItemService::getUploadDir();
        $filename = md5(time()) . '.jpg';
        $destFile = $destinationPath . '/' . $filename;

        try {
            copy($image_path, $destFile);
            return new UploadedFile($destFile, $filename, 'image/jpg', filesize($destFile), null, true);
        } catch (FileException $e) {
            throw $e;
        }
    }

    /** @test */
    public function it_can_see_list_of_items()
    {
        $this->getJson('api/items')
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    '*' => $this->structure
                ]
            ]);
    }

    /** @test */
    public function it_can_see_single_item()
    {
        $item = Item::first();
        $this->getJson("api/items/{$item->id}")
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => $this->structure
            ]);
    }

    /** @test */
    public function it_can_create_item()
    {
        $file = $this->getTempFile();
        $category = Category::first();

        $body = [
            "name" => "El Mariarchi",
            "description" => "El Bobo Maso",
            "category_id" => $category->id,
            "image" => $file
        ];
        $this->postJson('api/items', $body)
            ->assertStatus(201)
            ->assertJsonStructure([
                'data' => $this->structure
            ])
            ->assertJson([
                'data' => array_merge($body, ["image" => $file->getFilename()])
            ]);
    }

    /** @test */
    public function it_can_update_item()
    {
        $file = $this->getTempFile();
        $category = Category::first();
        $item = Item::first();

        $body = [
            "name" => "El Mariarchi #2",
            "description" => "El Bobo Maso #2",
            "category_id" => $category->id,
            "image" => $file
        ];
        $this->postJson("api/items/{$item->id}", $body)
            ->assertStatus(200)
            ->assertJsonStructure([
                'data' => $this->structure
            ])
            ->assertJson([
                'data' => array_merge($body, ["image" => $file->getFilename()])
            ]);
    }
}
